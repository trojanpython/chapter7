{'TMP': 'C:\\Users\\41649\\AppData\\Local\\Temp', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', '_OLD_VIRTUAL_PATH': 'E:\\Python3\\Scripts\\;E:\\Python3\\;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;E:\\Python2\\;E:\\Python2\\Scripts\\;;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Users\\41649\\AppData\\Local\\Microsoft\\WindowsApps', 'USERDOMAIN': 'DESKTOP-HFOHI94', 'COMPUTERNAME': 'DESKTOP-HFOHI94', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 10, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '8e0a', 'SYSTEMROOT': 'C:\\WINDOWS', 'PATH': 'E:\\Python3\\Scripts\\;E:\\Python3\\;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;E:\\Python2\\;E:\\Python2\\Scripts\\;;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Users\\41649\\AppData\\Local\\Microsoft\\WindowsApps', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'VIRTUAL_ENV': 'D:\\PythonProject\\py2\\venv', 'TEMP': 'C:\\Users\\41649\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'SESSIONNAME': 'Console', 'HOMEPATH': '\\Users\\41649', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-HFOHI94', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': '41649', 'LOGONSERVER': '\\\\DESKTOP-HFOHI94', 'PROMPT': '(venv) $P$G', 'LOCALAPPDATA': 'C:\\Users\\41649\\AppData\\Local', 'PROGRAMDATA': 'C:\\ProgramData', 'ONEDRIVE': 'C:\\Users\\41649\\OneDrive', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW', 'CONFIGSETROOT': 'C:\\WINDOWS\\ConfigSetRoot', 'WINDIR': 'C:\\WINDOWS', 'APPDATA': 'C:\\Users\\41649\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '8', '_OLD_VIRTUAL_PROMPT': '$P$G', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\41649'}